@testable import Workflow


public extension WorkflowAction {

    /// Returns a state tester containing `self`.
    public static func tester(withState state: WorkflowType.State) -> WorkflowActionTester<WorkflowType, Self> {
        return WorkflowActionTester(state: state)
    }

}


/// Testing helper that chains event sending and state/output assertions
/// to make tests easier to write.
///
/// ```
/// reducer
///     .tester(withState: .firstState)
///     .assertState { state in
///         XCTAssertEqual(.firstState, state)
///     }
///     .send(event: .exampleEvent) { output in
///         XCTAssertEqual(.finished, output)
///     }
///     .assertState { state in
///         XCTAssertEqual(.differentState, state)
///     }
/// ```
public struct WorkflowActionTester<WorkflowType, Action> where Action: WorkflowAction, Action.WorkflowType == WorkflowType {

    /// The current state
    internal let state: WorkflowType.State

    /// Initializes a new state tester
    fileprivate init(state: WorkflowType.State) {
        self.state = state
    }

    /// Sends an event to the reducer.
    ///
    /// - parameter event: The event to send.
    ///
    /// - parameter outputAssertions: An optional closure that runs validations on the output generated by the reducer.
    ///
    /// - returns: A new state tester containing the state after the update.
    @discardableResult
    public func send(action: Action, outputAssertions: (WorkflowType.Output?) -> Void = { _ in }) -> WorkflowActionTester<WorkflowType, Action> {

        var newState = state
        let output = action.apply(toState: &newState)

        outputAssertions(output)

        return WorkflowActionTester(state: newState)
    }

    /// Invokes the given closure (which is intended to contain test assertions) with the current state.
    ///
    /// - parameter assertions: A closure that accepts a single state value.
    ///
    /// - returns: A tester containing the current state.
    @discardableResult
    public func assertState(_ assertions: (WorkflowType.State) -> Void) -> WorkflowActionTester<WorkflowType, Action> {
        assertions(state)
        return self
    }

}
